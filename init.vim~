set number
set termbidi
set relativenumber
set tabstop=4
set shiftwidth=4
:set autoindent
:set smarttab
set softtabstop=4
set mouse=a
set encoding=utf-8  " The encoding displayed.
set fileencoding=en_US.UTF-8  " The encoding written to file.  "
set updatetime=25

" Cursorline highlight
:set      cursorline
:set      cursorcolumn
highlight Cursorline guibg=#2b2b2b
highlight Cursorlolumn guibg=#2b2b2b
set       hlsearch


" Spaces
set shiftwidth=4
set tabstop=4
set expandtab
set autoindent

" Clipboard

" Theme
:set completeopt-=preview " For No Previews
"colorscheme nord
syntax enable
:set background=dark
:colorscheme nord
let g:rehash256           = 1

" mapping in Normal mode.
nmap <C-s> :w<CR>
nmap <C-q> :q<CR>
nmap <C-o> :e .<CR>

" NERDTree map
nnoremap <C-f> :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-l> :call CocActionAsync('jumpDefinition')<CR>

" Tag bar map
nmap <F8> :TagbarToggle<CR>

" Syntastic map
nmap <F6> :SyntasticCheck<CR>
nmap <F7> :SyntasticReset<CR>

" tag bar configure
let g:tagbar_sort=0

" Syntastic confifure  
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let syntastic_mode_map = {"mode": "passive"}


let g:tmux_navigator_no_mappings = 1
noremap <silent> {Left-Mapping} :<C-U>TmuxNavigateLeft<cr>
noremap <silent> {Down-Mapping} :<C-U>TmuxNavigateDown<cr>
noremap <silent> {Up-Mapping} :<C-U>TmuxNavigateUp<cr>
noremap <silent> {Right-Mapping} :<C-U>TmuxNavigateRight<cr>
noremap <silent> {Previous-Mapping} :<C-U>TmuxNavigatePrevious<cr>

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

" If the tmux window is zoomed, keep it zoomed when moving from Vim to another pane
let g:tmux_navigator_preserve_zoom = 1

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
"
" " Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" mapping in Insert mode.
imap <C-s> <ESC>:w<CR>
imap <C-o> :e .<CR>


inoremap <expr> <Tab> pumvisible() ? coc#_select_confirm() : "<Tab>"
nnoremap <C-l> :call CocActionAsync('jumpDefinition')<CR>

if has('vim_starting')
      let s:repos = [
              \ 'neoclide/coc.nvim_release',
        \ ]

    let s:config_path = stdpath('config')
    let s:paths = filter(split(&g:rtp, ','), { _, v -> v !=# s:config_path && v !=# s:config_path . '/after' })
    let s:paths += map(s:repos, { _, v -> s:config_path . '/dein/repos/github.com/' . v })
    let &g:rtp = join(s:paths, ',')
          endif

          let g:coc_global_extensions = [
            \ 'coc-calc',
            \ 'coc-clangd',
            \ 'coc-css',
            \ 'coc-git',
            \ 'coc-json',
            \ 'coc-lua',
            \ 'coc-syntax',
            \ 'coc-tag',
            \ 'coc-vimlsp',
            \ ]

let g:coc_config_home = stdpath('config')

"inoremap <silent><expr> <Down> coc#pum#visible() ? coc#pum#next(0) : "\<Down>"
"inoremap <silent><expr> <Up> coc#pum#visible() ? coc#pum#prev(0) : "\<Up>"
"inoremap <expr> <CR> coc#pum#visible() ? coc#_select_confirm() : "\<CR>" }) })

set nocompatible              " be iMproved, required
filetype off                  " required
filetype plugin indent on

" set the runtime path to include Vundle and initialize
set rtp+=~/.config/nvim/bundle/Vundle.vim

call vundle#begin()
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'townk/vim-autoclose'
    Plugin 'junegunn/fzf'
    Plugin 'majutsushi/tagbar'
    Plugin 'scrooloose/syntastic'
    Plugin 'tpope/vim-fugitive'
    Plugin 'iamcco/markdown-preview.nvim'
    Plugin 'junegunn/vim-easy-align'
    Plugin 'christoomey/vim-tmux-navigator'
    Plugin 'altercation/vim-colors-solarized'
    Plugin 'tomasr/molokai'
call vundle#end()


        "  --- Just Some Notes ---
" :PlugClean :PlugInstall :UpdateRemotePlugins
 
" Plugins will be downloaded under the specified directory.
 call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

 " Declare the list of plugins.
 Plug 'tpope/vim-sensible'
 Plug 'junegunn/seoul256.vim'
 "Plug 'junegunn/fzf', { 'do': { -> fzf#ins"tall() } }
 "coc#pum#visible() ? coc#pum#prev(0) : "\Plug 'junegunn/fzf.vim'
 Plug 'vim-airline/vim-airline'
 Plug 'ryanoasis/vim-devicons'
 "Plug 'neoclide/coc.nvim'
 "
 " Use release branch (recommend)
 "Plug 'neoclide/coc.nvim', {'branch': 'release'}
 "
 " " Or build from source code by using yarn: https://yarnpkg.com
 "Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}

 Plug 'http://github.com/tpope/vim-surround' " Surrounding ysw)
 Plug 'https://github.com/preservim/nerdtree' " NerdTree
 Plug 'https://github.com/tpope/vim-commentary' " For Commenting gcc & gc
 Plug 'https://github.com/vim-airline/vim-airline' " Status bar
 Plug 'https://github.com/ap/vim-css-color' " CSS Color Preview
 Plug 'https://github.com/rafi/awesome-vim-colorschemes' " Retro Scheme
 "Plug 'https://github.com/neoclide/coc.nvim'  " Auto Completion
 Plug 'https://github.com/ryanoasis/vim-devicons' " Developer Icons
 Plug 'https://github.com/tc50cal/vim-terminal' " Vim Terminal
 Plug 'https://github.com/terryma/vim-multiple-cursors' " CTRL + N for multiple cursors

 let g:NERDTreeDirArrowExpandable="+"
 let g:NERDTreeDirArrowCollapsible="~"

"NerdTree
""autocmd VimEnter * NERDTree
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

let g:indentLine_char='|'

 "let g:loaded_ruby_provider = 0

   " :CocInstall coc-python
   " :CocInstall coc-clangd
   " :CocInstall coc-snippets
   " :CocCommand snippets.edit... FOR EACH FILE TYPE
 
   " air-line
   let g:airline_powerline_fonts = 1
 
   if !exists('g:airline_symbols')
       let g:airline_symbols = {}
       endif
 
       " airline symbols
       let g:airline_left_sep = ''
       let g:airline_left_alt_sep = ''
       let g:airline_right_sep = ''
       let g:airline_right_alt_sep = ''
       let g:airline_symbols.branch = ''
       let g:airline_symbols.readonly = ''
       let g:airline_symbols.linenr = ''
 

 " List ends here. Plugins become visible to Vim after this call.
 call plug#end()
